diff -up expect5.45.4/Dbg.c.omv~ expect5.45.4/Dbg.c
--- expect5.45.4/Dbg.c.omv~	2025-02-14 18:01:28.672249422 +0100
+++ expect5.45.4/Dbg.c	2025-02-14 18:03:26.795904777 +0100
@@ -50,7 +50,7 @@ static Dbg_OutputProc *printproc = 0;
 static ClientData printdata = 0;
 static int stdinmode;
 
-static void print _ANSI_ARGS_(TCL_VARARGS(Tcl_Interp *,interp));
+static void print (Tcl_Interp *interp, ...);
 
 static int debugger_active = FALSE;
 
@@ -382,8 +382,8 @@ char *argv[];
 	arg_index = 1;
 	
 	while (argc && (space > 0)) {
-		CONST char *elementPtr;
-		CONST char *nextPtr;
+		const char *elementPtr;
+		const char *nextPtr;
 		int wrap;
 
 		/* braces/quotes have been stripped off arguments */
@@ -487,7 +487,7 @@ Tcl_Interp *interp;
 CallFrame *curf;	/* current FramePtr */
 CallFrame *viewf;	/* view FramePtr */
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 char *level;
 {
 	PrintStackBelow(interp,curf,viewf);
@@ -544,14 +544,14 @@ enum debug_cmd cmdtype;
 /* debugger's trace handler */
 
 static int
-debugger_trap _ANSI_ARGS_ ((
+debugger_trap (
      ClientData clientData,
      Tcl_Interp *interp,
      int level,
-     CONST char *command,
+     const char *command,
      Tcl_Command commandInfo,
      int objc,
-     struct Tcl_Obj * CONST * objv));
+     struct Tcl_Obj * const * objv);
 
 
 /*ARGSUSED*/
@@ -562,10 +562,10 @@ debugger_trap(clientData,interp,level,co
      int level;			/* positive number if called by Tcl, -1 if */
 				/* called by Dbg_On in which case we don't */
 				/* know the level */
-     CONST char *command;
+     const char *command;
      Tcl_Command commandInfo; /* Unused */
      int objc;
-     struct Tcl_Obj * CONST * objv;
+     struct Tcl_Obj * const * objv;
 {
 	char level_text[6];	/* textual representation of level */
 
@@ -734,7 +734,7 @@ cmdNext(clientData, interp, objc, objv)
 ClientData clientData;
 Tcl_Interp *interp;
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 {
 	debug_new_action = TRUE;
 	debug_cmd = *(enum debug_cmd *)clientData;
@@ -758,7 +758,7 @@ cmdDir(clientData, interp, objc, objv)
 ClientData clientData;
 Tcl_Interp *interp;
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 {
     char* frame;
     debug_cmd = *(enum debug_cmd *)clientData;
@@ -780,7 +780,7 @@ cmdSimple(clientData, interp, objc, objv
 ClientData clientData;
 Tcl_Interp *interp;
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 {
 	debug_new_action = TRUE;
 	debug_cmd = *(enum debug_cmd *)clientData;
@@ -831,7 +831,7 @@ cmdWhere(clientData, interp, objc, objv)
 ClientData clientData;
 Tcl_Interp *interp;
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 {
     static char* options [] = {
 	"-compress",
@@ -903,7 +903,7 @@ cmdBreak(clientData, interp, objc, objv)
 ClientData clientData;
 Tcl_Interp *interp;
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 {
 	struct breakpoint *b;
 	char *error_msg;
@@ -1111,7 +1111,7 @@ cmdHelp(clientData, interp, objc, objv)
 ClientData clientData;
 Tcl_Interp *interp;
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 {
 	char **hp;
 
@@ -1128,13 +1128,14 @@ Tcl_Interp *interp;
 
 /*VARARGS*/
 static void
-print TCL_VARARGS_DEF(Tcl_Interp *,arg1)
+print (Tcl_Interp *arg1, ...)
 {
 	Tcl_Interp *interp;
 	char *fmt;
 	va_list args;
 
-	interp = TCL_VARARGS_START(Tcl_Interp *,arg1,args);
+	va_start(args, arg1);
+	interp = va_arg(args, Tcl_Interp *);
 	fmt = va_arg(args,char *);
 	if (!printproc) vprintf(fmt,args);
 	else {
@@ -1255,7 +1256,7 @@ zero (Tcl_Interp *interp, char *string)
 	return 0;
 }
 
-extern int expSetBlockModeProc _ANSI_ARGS_((int fd, int mode));
+extern int expSetBlockModeProc (int fd, int mode);
 
 static int
 simple_interactor(Tcl_Interp *interp, ClientData data)
@@ -1288,7 +1289,7 @@ simple_interactor(Tcl_Interp *interp, Cl
 			   version */
 
 			static int nextid = 0;
-			CONST char *nextidstr = Tcl_GetVar2(interp,"tcl::history","nextid",0);
+			const char *nextidstr = Tcl_GetVar2(interp,"tcl::history","nextid",0);
 			if (nextidstr) {
 				sscanf(nextidstr,"%d",&nextid);
 			}
diff -up expect5.45.4/exp_chan.c.omv~ expect5.45.4/exp_chan.c
--- expect5.45.4/exp_chan.c.omv~	2025-02-14 17:54:18.985342724 +0100
+++ expect5.45.4/exp_chan.c	2025-02-14 18:16:34.089318475 +0100
@@ -37,20 +37,23 @@
 #include "exp_log.h"
 #include "tcldbg.h" /* Dbg_StdinMode */
 
-extern int		expSetBlockModeProc _ANSI_ARGS_((int fd, int mode));
-static int		ExpBlockModeProc _ANSI_ARGS_((ClientData instanceData,
-			    int mode));
-static int		ExpCloseProc _ANSI_ARGS_((ClientData instanceData,
-			    Tcl_Interp *interp));
-static int		ExpInputProc _ANSI_ARGS_((ClientData instanceData,
-		            char *buf, int toRead, int *errorCode));
-static int		ExpOutputProc _ANSI_ARGS_((
-			    ClientData instanceData, char *buf, int toWrite,
-                            int *errorCode));
-static void		ExpWatchProc _ANSI_ARGS_((ClientData instanceData,
-		            int mask));
-static int		ExpGetHandleProc _ANSI_ARGS_((ClientData instanceData,
-		            int direction, ClientData *handlePtr));
+extern int		expSetBlockModeProc (int fd, int mode);
+static int		ExpBlockModeProc (ClientData instanceData,
+			    int mode);
+static int		ExpCloseProc (ClientData instanceData,
+			    Tcl_Interp *interp);
+static int		ExpClose2Proc (ClientData instanceData,
+			    Tcl_Interp *interp, int flags);
+static int		ExpInputProc (ClientData instanceData,
+		            char *buf, int toRead, int *errorCode);
+static int		ExpOutputProc (
+			    ClientData instanceData, const char *buf, int toWrite,
+                            int *errorCode);
+static void		ExpWatchProc (ClientData instanceData,
+		            int mask);
+static int		ExpGetHandleProc (ClientData instanceData,
+		            int direction, ClientData *handlePtr);
+extern void exp_background_channelhandler (ClientData,int);
 
 /*
  * This structure describes the channel type structure for Expect-based IO:
@@ -58,7 +61,7 @@ static int		ExpGetHandleProc _ANSI_ARGS_
 
 Tcl_ChannelType expChannelType = {
     "exp",				/* Type name. */
-    TCL_CHANNEL_VERSION_2,
+    TCL_CHANNEL_VERSION_5,
     ExpCloseProc,			/* Close proc. */
     ExpInputProc,			/* Input proc. */
     ExpOutputProc,			/* Output proc. */
@@ -67,8 +70,14 @@ Tcl_ChannelType expChannelType = {
     NULL,				/* Get option proc. */
     ExpWatchProc,			/* Initialize notifier. */
     ExpGetHandleProc,			/* Get OS handles out of channel. */
-    NULL,				/* Close2 proc */
+    ExpClose2Proc,			/* Close2 proc. */
     ExpBlockModeProc,			/* Set blocking/nonblocking mode.*/
+    NULL,				/* blockModeProc */
+    NULL,				/* flushProc */
+    NULL,				/* handlerProc */
+    NULL,				/* wideSeekProc */
+    NULL,				/* threadActionProc */
+    NULL,				/* truncateProc */
 };
 
 typedef struct ThreadSpecificData {
@@ -259,7 +268,7 @@ ExpInputProc(instanceData, buf, toRead,
 static int
 ExpOutputProc(instanceData, buf, toWrite, errorCodePtr)
     ClientData instanceData;		/* Exp state. */
-    char *buf;				/* The data buffer. */
+    const char *buf;			/* The data buffer. */
     int toWrite;			/* How many bytes to write? */
     int *errorCodePtr;			/* Where to store error code. */
 {
@@ -307,7 +316,6 @@ ExpOutputProc(instanceData, buf, toWrite
  *
  *----------------------------------------------------------------------
  */
-
 /*ARGSUSED*/
 static int
 ExpCloseProc(instanceData, interp)
@@ -365,6 +373,11 @@ ExpCloseProc(instanceData, interp)
     }
     return 0;
 }
+
+static int ExpClose2Proc(void *instanceData, Tcl_Interp *interp, int flags) {
+	return ExpCloseProc(instanceData, interp);
+}
+
 
 /*
  *----------------------------------------------------------------------
diff -up expect5.45.4/exp_clib.c.omv~ expect5.45.4/exp_clib.c
--- expect5.45.4/exp_clib.c.omv~	2025-02-14 14:28:07.090548046 +0100
+++ expect5.45.4/exp_clib.c	2025-02-14 17:54:07.716249177 +0100
@@ -8,7 +8,9 @@ would appreciate credit if this program
 */
 
 #include "expect_cf.h"
+#include "exp_command.h"
 #include <stdio.h>
+#include <stdarg.h>
 #include <setjmp.h>
 #ifdef HAVE_INTTYPES_H
 #  include <inttypes.h>
@@ -27,6 +29,8 @@ would appreciate credit if this program
 # endif
 #endif
 
+#include <unistd.h>
+
 #ifdef CRAY
 # ifndef TCSETCTTY
 #  if defined(HAVE_TERMIOS)
@@ -84,25 +88,25 @@ would appreciate credit if this program
 #ifndef _STDLIB
 #define _STDLIB
 
-extern void		abort _ANSI_ARGS_((void));
-extern double		atof _ANSI_ARGS_((CONST char *string));
-extern int		atoi _ANSI_ARGS_((CONST char *string));
-extern long		atol _ANSI_ARGS_((CONST char *string));
-extern char *		calloc _ANSI_ARGS_((unsigned int numElements,
-			    unsigned int size));
-extern void		exit _ANSI_ARGS_((int status));
-extern int		free _ANSI_ARGS_((char *blockPtr));
-extern char *		getenv _ANSI_ARGS_((CONST char *name));
-extern char *		malloc _ANSI_ARGS_((unsigned int numBytes));
-extern void		qsort _ANSI_ARGS_((VOID *base, int n, int size,
-			    int (*compar)(CONST VOID *element1, CONST VOID
-			    *element2)));
-extern char *		realloc _ANSI_ARGS_((char *ptr, unsigned int numBytes));
-extern double		strtod _ANSI_ARGS_((CONST char *string, char **endPtr));
-extern long		strtol _ANSI_ARGS_((CONST char *string, char **endPtr,
-			    int base));
-extern unsigned long	strtoul _ANSI_ARGS_((CONST char *string,
-			    char **endPtr, int base));
+extern void		abort (void);
+extern double		atof (const char *string);
+extern int		atoi (const char *string);
+extern long		atol (const char *string);
+extern char *		calloc (unsigned int numElements,
+			    unsigned int size);
+extern void		exit (int status);
+extern int		free (char *blockPtr);
+extern char *		getenv (const char *name);
+extern char *		malloc (unsigned int numBytes);
+extern void		qsort (VOID *base, int n, int size,
+			    int (*compar)(const VOID *element1, const VOID
+			    *element2));
+extern char *		realloc (char *ptr, unsigned int numBytes);
+extern double		strtod (const char *string, char **endPtr);
+extern long		strtol (const char *string, char **endPtr,
+			    int base);
+extern unsigned long	strtoul (const char *string,
+			    char **endPtr, int base);
 
 #endif /* _STDLIB */
 
@@ -323,26 +327,26 @@ static char regdummy;
  * Forward declarations for TclRegComp()'s friends.
  */
 
-static char *		reg _ANSI_ARGS_((int paren, int *flagp,
-			    struct regcomp_state *rcstate));
-static char *		regatom _ANSI_ARGS_((int *flagp,
-			    struct regcomp_state *rcstate));
-static char *		regbranch _ANSI_ARGS_((int *flagp,
-			    struct regcomp_state *rcstate));
-static void		regc _ANSI_ARGS_((int b,
-			    struct regcomp_state *rcstate));
-static void		reginsert _ANSI_ARGS_((int op, char *opnd,
-			    struct regcomp_state *rcstate));
-static char *		regnext _ANSI_ARGS_((char *p));
-static char *		regnode _ANSI_ARGS_((int op,
-			    struct regcomp_state *rcstate));
-static void 		regoptail _ANSI_ARGS_((char *p, char *val));
-static char *		regpiece _ANSI_ARGS_((int *flagp,
-			    struct regcomp_state *rcstate));
-static void 		regtail _ANSI_ARGS_((char *p, char *val));
+static char *		reg (int paren, int *flagp,
+			    struct regcomp_state *rcstate);
+static char *		regatom (int *flagp,
+			    struct regcomp_state *rcstate);
+static char *		regbranch (int *flagp,
+			    struct regcomp_state *rcstate);
+static void		regc (int b,
+			    struct regcomp_state *rcstate);
+static void		reginsert (int op, char *opnd,
+			    struct regcomp_state *rcstate);
+static char *		regnext (char *p);
+static char *		regnode (int op,
+			    struct regcomp_state *rcstate);
+static void 		regoptail (char *p, char *val);
+static char *		regpiece (int *flagp,
+			    struct regcomp_state *rcstate);
+static void 		regtail (char *p, char *val);
 
 #ifdef STRCSPN
-static int strcspn _ANSI_ARGS_((char *s1, char *s2));
+static int strcspn (char *s1, char *s2);
 #endif
 
 /*
@@ -872,17 +876,17 @@ struct regexec_state  {
 /*
  * Forwards.
  */
-static int 		regtry _ANSI_ARGS_((regexp *prog, char *string,
-			    struct regexec_state *restate));
-static int 		regmatch _ANSI_ARGS_((char *prog,
-			    struct regexec_state *restate));
-static int 		regrepeat _ANSI_ARGS_((char *p,
-			    struct regexec_state *restate));
+static int 		regtry (regexp *prog, char *string,
+			    struct regexec_state *restate);
+static int 		regmatch (char *prog,
+			    struct regexec_state *restate);
+static int 		regrepeat (char *p,
+			    struct regexec_state *restate);
 
 #ifdef DEBUG
 int regnarrate = 0;
-void regdump _ANSI_ARGS_((regexp *r));
-static char *regprop _ANSI_ARGS_((char *op));
+void regdump (regexp *r);
+static char *regprop (char *op);
 #endif
 
 /*
@@ -2230,7 +2234,7 @@ when trapping, see below in child half o
 /* returns fd of master side of pty */
 /*VARARGS*/
 int
-exp_spawnl TCL_VARARGS_DEF(char *,arg1)
+exp_spawnl (char *arg1, ...)
 /*exp_spawnl(va_alist)*/
 /*va_dcl*/
 {
@@ -2238,7 +2242,8 @@ exp_spawnl TCL_VARARGS_DEF(char *,arg1)
 	int i;
 	char *arg, **argv;
 
-	arg = TCL_VARARGS_START(char *,arg1,args);
+	va_start(args, arg1);
+	arg = va_arg(args, char*);
 	/*va_start(args);*/
 	for (i=1;;i++) {
 		arg = va_arg(args,char *);
@@ -2247,7 +2252,8 @@ exp_spawnl TCL_VARARGS_DEF(char *,arg1)
 	va_end(args);
 	if (i == 0) sysreturn(EINVAL);
 	if (!(argv = (char **)malloc((i+1)*sizeof(char *)))) sysreturn(ENOMEM);
-	argv[0] = TCL_VARARGS_START(char *,arg1,args);
+	va_start(args, arg1);
+	argv[0] = va_arg(args, char*);
 	/*va_start(args);*/
 	for (i=1;;i++) {
 		argv[i] = va_arg(args,char *);
@@ -2705,7 +2711,7 @@ struct exp_case *ecases;
 
 /*VARARGS*/
 int
-exp_expectl TCL_VARARGS_DEF(int,arg1)
+exp_expectl (int arg1, ...)
 /*exp_expectl(va_alist)*/
 /*va_dcl*/
 {
@@ -2715,7 +2721,8 @@ exp_expectl TCL_VARARGS_DEF(int,arg1)
 	int i;
 	enum exp_type type;
 
-	fd = TCL_VARARGS_START(int,arg1,args);
+	va_start(args, arg1);
+	fd = va_arg(args, int);
 	/* va_start(args);*/
 	/* fd = va_arg(args,int);*/
 	/* first just count the arg sets */
@@ -2742,7 +2749,8 @@ exp_expectl TCL_VARARGS_DEF(int,arg1)
 		sysreturn(ENOMEM);
 
 	/* now set up the actual cases */
-	fd = TCL_VARARGS_START(int,arg1,args);
+	va_start(args, arg1);
+	fd = va_arg(args, int);
 	/*va_start(args);*/
 	/*va_arg(args,int);*/		/*COMPUTED BUT NOT USED*/
 	for (ec=ecases;;ec++) {
@@ -2770,7 +2778,7 @@ exp_expectl TCL_VARARGS_DEF(int,arg1)
 }
 
 int
-exp_fexpectl TCL_VARARGS_DEF(FILE *,arg1)
+exp_fexpectl (FILE *arg1, ...)
 /*exp_fexpectl(va_alist)*/
 /*va_dcl*/
 {
@@ -2780,7 +2788,8 @@ exp_fexpectl TCL_VARARGS_DEF(FILE *,arg1
 	int i;
 	enum exp_type type;
 
-	fp = TCL_VARARGS_START(FILE *,arg1,args);
+	va_start(args, arg1);
+	fp = va_arg(args, FILE *);
 	/*va_start(args);*/
 	/*fp = va_arg(args,FILE *);*/
 	/* first just count the arg-pairs */
@@ -2810,7 +2819,8 @@ exp_fexpectl TCL_VARARGS_DEF(FILE *,arg1
 	va_start(args);
 	va_arg(args,FILE *);		/*COMPUTED, BUT NOT USED*/
 #endif
-	(void) TCL_VARARGS_START(FILE *,arg1,args);
+	va_start(args, arg1);
+	(void) va_arg(args, FILE*);
 
 	for (ec=ecases;;ec++) {
 		ec->type = va_arg(args,enum exp_type);
@@ -2898,12 +2908,13 @@ exp_disconnect()
 /* use this function for recording unusual things in the log */
 /*VARARGS*/
 void
-exp_debuglog TCL_VARARGS_DEF(char *,arg1)
+exp_debuglog (char *arg1, ...)
 {
     char *fmt;
     va_list args;
 
-    fmt = TCL_VARARGS_START(char *,arg1,args);
+    va_start(args, arg1);
+    fmt = va_arg(args, char *);
     if (exp_debugfile) vfprintf(exp_debugfile,fmt,args);
     if (exp_is_debugging) {
 	vfprintf(stderr,fmt,args);
@@ -2919,12 +2930,13 @@ exp_debuglog TCL_VARARGS_DEF(char *,arg1
 /* use this function for error conditions */
 /*VARARGS*/
 void
-exp_errorlog TCL_VARARGS_DEF(char *,arg1)
+exp_errorlog (char *arg1, ...)
 {
     char *fmt;
     va_list args;
     
-    fmt = TCL_VARARGS_START(char *,arg1,args);
+    va_start(args, arg1);
+    fmt = va_arg(args, char *);
     vfprintf(stderr,fmt,args);
     if (exp_debugfile) vfprintf(exp_debugfile,fmt,args);
     if (exp_logfile) vfprintf(exp_logfile,fmt,args);
diff -up expect5.45.4/exp_command.c.omv~ expect5.45.4/exp_command.c
--- expect5.45.4/exp_command.c.omv~	2025-02-14 13:55:53.694540749 +0100
+++ expect5.45.4/exp_command.c	2025-02-14 14:00:34.360068512 +0100
@@ -165,7 +165,7 @@ init_traps(RETSIGTYPE (*traps[])())
 /* Do not terminate format strings with \n!!! */
 /*VARARGS*/
 void
-exp_error TCL_VARARGS_DEF(Tcl_Interp *,arg1)
+exp_error (Tcl_Interp *arg1, ...)
 /*exp_error(va_alist)*/
 /*va_dcl*/
 {
@@ -174,7 +174,8 @@ exp_error TCL_VARARGS_DEF(Tcl_Interp *,a
     va_list args;
     char buffer[2000];
 
-    interp = TCL_VARARGS_START(Tcl_Interp *,arg1,args);
+    va_start(args, arg1);
+    interp = arg1;
     fmt = va_arg(args,char *);
     vsprintf(buffer,fmt,args);
     Tcl_SetResult(interp,buffer,TCL_VOLATILE);
@@ -224,7 +225,7 @@ expStateFromChannelName(
 {
     ExpState *esPtr;
     Tcl_Channel channel;
-    CONST char *chanName;
+    const char *chanName;
 
     if (any) {
 	if (0 == strcmp(name,EXP_SPAWN_ID_ANY_LIT)) {
@@ -576,7 +577,7 @@ Exp_SpawnObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     ExpState *esPtr = 0;
     int slave;
@@ -612,7 +613,7 @@ Exp_SpawnObjCmd(
     char *chanName = 0;
     int leaveopen = FALSE;
     int rc, wc;
-    CONST char *stty_init;
+    const char *stty_init;
     int slave_write_ioctls = 1;
     /* by default, slave will be write-ioctled this many times */
     int slave_opens = 3;
@@ -1371,7 +1372,7 @@ Exp_ExpPidObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     char *chanName = 0;
     ExpState *esPtr = 0;
@@ -1421,7 +1422,7 @@ Exp_GetpidDeprecatedObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     expDiagLog("getpid is deprecated, use pid\r\n");
     Tcl_SetObjResult (interp, Tcl_NewIntObj (getpid()));
@@ -1434,7 +1435,7 @@ Exp_SleepObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     double s;
 
@@ -1466,7 +1467,7 @@ get_slow_args(
     struct slow_arg *x)
 {
     int sc;		/* return from scanf */
-    CONST char *s = exp_get_var(interp,"send_slow");
+    const char *s = exp_get_var(interp,"send_slow");
     if (!s) {
 	exp_error(interp,"send -s: send_slow has no value");
 	return(-1);
@@ -1537,7 +1538,7 @@ get_human_args(
     struct human_arg *x)
 {
     int sc;		/* return from scanf */
-    CONST char *s = exp_get_var(interp,"send_human");
+    const char *s = exp_get_var(interp,"send_human");
 
     if (!s) {
 	exp_error(interp,"send -h: send_human has no value");
@@ -1917,7 +1918,7 @@ Exp_SendLogObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     static char* options[] = { "--", NULL };
     enum options { LOG_QUOTE };
@@ -1961,7 +1962,7 @@ Exp_SendObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])
+    Tcl_Obj *const objv[])
 {
     ThreadSpecificData *tsdPtr = TCL_TSD_INIT(&dataKey);
     ExpState *esPtr = 0;
@@ -2159,7 +2160,7 @@ Exp_LogFileObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     static char resultbuf[1000];
     char *chanName = 0;
@@ -2292,7 +2293,7 @@ Exp_LogUserObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int old_loguser = expLogUserGet();
 
@@ -2324,7 +2325,7 @@ Exp_DebugObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int now = FALSE;	/* soon if FALSE, now if TRUE */
     int exp_tcl_debugger_was_available = exp_tcl_debugger_available;
@@ -2394,7 +2395,7 @@ Exp_ExpInternalObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int newChannel = FALSE;
     Tcl_Channel oldChannel;
@@ -2474,7 +2475,7 @@ Exp_ExitObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int value = 0;
 
@@ -2530,12 +2531,12 @@ Exp_ConfigureObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])	/* Argument objects. */
+    Tcl_Obj *const objv[])	/* Argument objects. */
 {
     /* Magic configuration stuff. */
     int i, opt, val;
 
-    static CONST84 char* options [] = {
+    static const char* options [] = {
 	"-strictwrite", NULL
     };
     enum options {
@@ -2571,7 +2572,7 @@ Exp_CloseObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[]) 	/* Argument objects. */
+    Tcl_Obj *const objv[]) 	/* Argument objects. */
 {
     int onexec_flag = FALSE;	/* true if -onexec seen */
     int close_onexec;
@@ -2682,10 +2683,10 @@ tcl_tracer(
     ClientData clientData,
     Tcl_Interp *interp,
     int level,
-    CONST char *command,
+    const char *command,
     Tcl_Command cmdInfo,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int i;
 
@@ -2709,7 +2710,7 @@ Exp_StraceObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     static int trace_level = 0;
     static Tcl_Trace trace_handle;
@@ -2863,7 +2864,7 @@ Exp_WaitObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     char *chanName = 0;
     struct ExpState *esPtr;
@@ -3076,7 +3077,7 @@ Exp_ForkObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int rc;
     if (objc > 1) {
@@ -3110,7 +3111,7 @@ Exp_DisconnectObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     ThreadSpecificData *tsdPtr = TCL_TSD_INIT(&dataKey);
     
@@ -3220,7 +3221,7 @@ Exp_OverlayObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int newfd, oldfd;
     int dash_name = 0;
@@ -3311,7 +3312,7 @@ Exp_InterpreterObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     Tcl_Obj *eofObj = 0;
     int i;
@@ -3359,7 +3360,7 @@ Exp_ExpContinueObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     if (objc == 1) {
 	return EXP_CONTINUE;
@@ -3379,7 +3380,7 @@ Exp_InterReturnObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])
+    Tcl_Obj *const objv[])
 {
     /* let Tcl's return command worry about args */
     /* if successful (i.e., TCL_RETURN is returned) */
@@ -3400,7 +3401,7 @@ Exp_OpenObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     ExpState *esPtr;
     char *chanName = 0;
diff -up expect5.45.4/exp_command.h.omv~ expect5.45.4/exp_command.h
--- expect5.45.4/exp_command.h.omv~	2025-02-14 13:50:25.260162466 +0100
+++ expect5.45.4/exp_command.h	2025-02-14 13:55:09.685117906 +0100
@@ -27,21 +27,21 @@ would appreciate credit if this program
 
 #define EXP_CHANNELNAMELEN (16 + TCL_INTEGER_SPACE)
 
-EXTERN char *		exp_get_var _ANSI_ARGS_((Tcl_Interp *,char *));
+EXTERN char *		exp_get_var (Tcl_Interp *,char *);
 
 EXTERN int exp_default_match_max;
 EXTERN int exp_default_parity;
 EXTERN int exp_default_rm_nulls;
 EXTERN int exp_default_close_on_eof;
 
-EXTERN int		exp_one_arg_braced _ANSI_ARGS_((Tcl_Obj *));
+EXTERN int		exp_one_arg_braced (Tcl_Obj *);
 
-EXTERN Tcl_Obj*		exp_eval_with_one_arg _ANSI_ARGS_((ClientData,
-				Tcl_Interp *, struct Tcl_Obj * CONST objv[]));
+EXTERN Tcl_Obj*		exp_eval_with_one_arg (ClientData,
+				Tcl_Interp *, struct Tcl_Obj * const objv[]);
 
-EXTERN void		exp_lowmemcpy _ANSI_ARGS_((char *,char *,int));
+EXTERN void		exp_lowmemcpy (char *,char *,int);
 
-EXTERN int exp_flageq_code _ANSI_ARGS_((char *,char *,int));
+EXTERN int exp_flageq_code (char *,char *,int);
 
 #define exp_flageq(flag,string,minlen) \
 (((string)[0] == (flag)[0]) && (exp_flageq_code(((flag)+1),((string)+1),((minlen)-1))))
@@ -209,16 +209,16 @@ extern Tcl_ChannelType expChannelType;
 #define EXP_DIRECT	1
 #define EXP_INDIRECT	2
 
-EXTERN void		expAdjust _ANSI_ARGS_((ExpState *));
-EXTERN int		expWriteChars _ANSI_ARGS_((ExpState *,char *,int));
-EXTERN int		expWriteCharsUni _ANSI_ARGS_((ExpState *,Tcl_UniChar *,int));
-EXTERN void		exp_buffer_shuffle _ANSI_ARGS_((Tcl_Interp *,ExpState *,int,char *,char *));
-EXTERN int		exp_close _ANSI_ARGS_((Tcl_Interp *,ExpState *));
-EXTERN void		exp_close_all _ANSI_ARGS_((Tcl_Interp *));
+EXTERN void		expAdjust (ExpState *);
+EXTERN int		expWriteChars (ExpState *,char *,int);
+EXTERN int		expWriteCharsUni (ExpState *,Tcl_UniChar *,int);
+EXTERN void		exp_buffer_shuffle (Tcl_Interp *,ExpState *,int,char *,char *);
+EXTERN int		exp_close (Tcl_Interp *,ExpState *);
+EXTERN void		exp_close_all (Tcl_Interp *);
 EXTERN void		exp_ecmd_remove_fd_direct_and_indirect 
-				_ANSI_ARGS_((Tcl_Interp *,int));
-EXTERN void		exp_trap_on _ANSI_ARGS_((int));
-EXTERN int		exp_trap_off _ANSI_ARGS_((char *));
+				(Tcl_Interp *,int);
+EXTERN void		exp_trap_on (int);
+EXTERN int		exp_trap_off (char *);
 
 EXTERN void		exp_strftime(char *format, const struct tm *timeptr,Tcl_DString *dstring);
 
@@ -231,26 +231,26 @@ EXTERN int exp_configure_count;	/* # of
 EXTERN int exp_nostack_dump;	/* TRUE if user has requested unrolling of */
 				/* stack with no trace */
 
-EXTERN void		exp_init_pty _ANSI_ARGS_((void));
-EXTERN void		exp_pty_exit _ANSI_ARGS_((void));
-EXTERN void		exp_init_tty _ANSI_ARGS_((void));
-EXTERN void		exp_init_stdio _ANSI_ARGS_((void));
-/*EXTERN void		exp_init_expect _ANSI_ARGS_((Tcl_Interp *));*/
-EXTERN void		exp_init_spawn_ids _ANSI_ARGS_((Tcl_Interp *));
-EXTERN void		exp_init_spawn_id_vars _ANSI_ARGS_((Tcl_Interp *));
-EXTERN void		exp_init_trap _ANSI_ARGS_((void));
-EXTERN void		exp_init_send _ANSI_ARGS_((void));
-EXTERN void		exp_init_unit_random _ANSI_ARGS_((void));
-EXTERN void		exp_init_sig _ANSI_ARGS_((void));
-EXTERN void		expChannelInit _ANSI_ARGS_((void));
-EXTERN int		expChannelCountGet _ANSI_ARGS_((void));
-EXTERN int              expChannelStillAlive _ANSI_ARGS_((ExpState *, char *));
+EXTERN void		exp_init_pty (void);
+EXTERN void		exp_pty_exit (void);
+EXTERN void		exp_init_tty (void);
+EXTERN void		exp_init_stdio (void);
+/*EXTERN void		exp_init_expect (Tcl_Interp *));*/
+EXTERN void		exp_init_spawn_ids (Tcl_Interp *);
+EXTERN void		exp_init_spawn_id_vars (Tcl_Interp *);
+EXTERN void		exp_init_trap (void);
+EXTERN void		exp_init_send (void);
+EXTERN void		exp_init_unit_random (void);
+EXTERN void		exp_init_sig (void);
+EXTERN void		expChannelInit (void);
+EXTERN int		expChannelCountGet (void);
+EXTERN int              expChannelStillAlive (ExpState *, char *);
 
-EXTERN int		exp_tcl2_returnvalue _ANSI_ARGS_((int));
-EXTERN int		exp_2tcl_returnvalue _ANSI_ARGS_((int));
+EXTERN int		exp_tcl2_returnvalue (int);
+EXTERN int		exp_2tcl_returnvalue (int);
 
-EXTERN void		exp_rearm_sigchld _ANSI_ARGS_((Tcl_Interp *));
-EXTERN int		exp_string_to_signal _ANSI_ARGS_((Tcl_Interp *,char *));
+EXTERN void		exp_rearm_sigchld (Tcl_Interp *);
+EXTERN int		exp_string_to_signal (Tcl_Interp *,char *);
 
 EXTERN char *exp_onexit_action;
 
@@ -286,16 +286,16 @@ struct exp_i {
 	struct exp_i *next;
 };
 
-EXTERN struct exp_i *	exp_new_i_complex _ANSI_ARGS_((Tcl_Interp *,
-					char *, int, Tcl_VarTraceProc *));
-EXTERN struct exp_i *	exp_new_i_simple _ANSI_ARGS_((ExpState *,int));
-EXTERN struct exp_state_list *exp_new_state _ANSI_ARGS_((ExpState *));
-EXTERN void		exp_free_i _ANSI_ARGS_((Tcl_Interp *,struct exp_i *,
-					Tcl_VarTraceProc *));
-EXTERN void		exp_free_state _ANSI_ARGS_((struct exp_state_list *));
-EXTERN void		exp_free_state_single _ANSI_ARGS_((struct exp_state_list *));
-EXTERN int		exp_i_update _ANSI_ARGS_((Tcl_Interp *,
-					struct exp_i *));
+EXTERN struct exp_i *	exp_new_i_complex (Tcl_Interp *,
+					char *, int, Tcl_VarTraceProc *);
+EXTERN struct exp_i *	exp_new_i_simple (ExpState *,int);
+EXTERN struct exp_state_list *exp_new_state (ExpState *);
+EXTERN void		exp_free_i (Tcl_Interp *,struct exp_i *,
+					Tcl_VarTraceProc *);
+EXTERN void		exp_free_state (struct exp_state_list *);
+EXTERN void		exp_free_state_single (struct exp_state_list *);
+EXTERN int		exp_i_update (Tcl_Interp *,
+					struct exp_i *);
 
 /*
  * definitions for creating commands
@@ -314,34 +314,34 @@ struct exp_cmd_data {
 	int 		flags;
 };
 
-EXTERN void		exp_create_commands _ANSI_ARGS_((Tcl_Interp *,
-						struct exp_cmd_data *));
-EXTERN void		exp_init_main_cmds _ANSI_ARGS_((Tcl_Interp *));
-EXTERN void		exp_init_expect_cmds _ANSI_ARGS_((Tcl_Interp *));
-EXTERN void		exp_init_most_cmds _ANSI_ARGS_((Tcl_Interp *));
-EXTERN void		exp_init_trap_cmds _ANSI_ARGS_((Tcl_Interp *));
-EXTERN void		exp_init_interact_cmds _ANSI_ARGS_((Tcl_Interp *));
+EXTERN void		exp_create_commands (Tcl_Interp *,
+						struct exp_cmd_data *);
+EXTERN void		exp_init_main_cmds (Tcl_Interp *);
+EXTERN void		exp_init_expect_cmds (Tcl_Interp *);
+EXTERN void		exp_init_most_cmds (Tcl_Interp *);
+EXTERN void		exp_init_trap_cmds (Tcl_Interp *);
+EXTERN void		exp_init_interact_cmds (Tcl_Interp *);
 EXTERN void		exp_init_tty_cmds();
 
-EXTERN ExpState *	expStateCheck _ANSI_ARGS_((Tcl_Interp *,ExpState *,int,int,char *));
-EXTERN ExpState *       expStateCurrent _ANSI_ARGS_((Tcl_Interp *,int,int,int));
-EXTERN ExpState *       expStateFromChannelName _ANSI_ARGS_((Tcl_Interp *,char *,int,int,int,char *));
-EXTERN void		expStateFree _ANSI_ARGS_((ExpState *));
-
-EXTERN ExpState *	expCreateChannel _ANSI_ARGS_((Tcl_Interp *,int,int,int));
-EXTERN ExpState *	expWaitOnAny _ANSI_ARGS_((void));
-EXTERN ExpState *	expWaitOnOne _ANSI_ARGS_((void));
-EXTERN void		expExpectVarsInit _ANSI_ARGS_((void));
-EXTERN int		expStateAnyIs _ANSI_ARGS_((ExpState *));
-EXTERN int		expDevttyIs _ANSI_ARGS_((ExpState *));
-EXTERN int		expStdinoutIs _ANSI_ARGS_((ExpState *));
-EXTERN ExpState *	expStdinoutGet _ANSI_ARGS_((void));
-EXTERN ExpState *	expDevttyGet _ANSI_ARGS_((void));
+EXTERN ExpState *	expStateCheck (Tcl_Interp *,ExpState *,int,int,char *);
+EXTERN ExpState *       expStateCurrent (Tcl_Interp *,int,int,int);
+EXTERN ExpState *       expStateFromChannelName (Tcl_Interp *,char *,int,int,int,char *);
+EXTERN void		expStateFree (ExpState *);
+
+EXTERN ExpState *	expCreateChannel (Tcl_Interp *,int,int,int);
+EXTERN ExpState *	expWaitOnAny (void);
+EXTERN ExpState *	expWaitOnOne (void);
+EXTERN void		expExpectVarsInit (void);
+EXTERN int		expStateAnyIs (ExpState *);
+EXTERN int		expDevttyIs (ExpState *);
+EXTERN int		expStdinoutIs (ExpState *);
+EXTERN ExpState *	expStdinoutGet (void);
+EXTERN ExpState *	expDevttyGet (void);
 
 /* generic functions that really should be provided by Tcl */
 #if 0 /* Redefined as macros. */
-EXTERN int		expSizeGet _ANSI_ARGS_((ExpState *));
-EXTERN int		expSizeZero _ANSI_ARGS_((ExpState *));
+EXTERN int		expSizeGet (ExpState *);
+EXTERN int		expSizeZero (ExpState *);
 #else
 #define expSizeGet(esPtr)  ((esPtr)->input.use)
 #define expSizeZero(esPtr) (((esPtr)->input.use) == 0)
diff -up expect5.45.4/exp_event.h.omv~ expect5.45.4/exp_event.h
--- expect5.45.4/exp_event.h.omv~	2025-02-14 13:55:14.911991669 +0100
+++ expect5.45.4/exp_event.h	2025-02-14 13:55:36.566444982 +0100
@@ -1,21 +1,21 @@
 /* exp_event.h - event definitions */
 
-int exp_get_next_event _ANSI_ARGS_((Tcl_Interp *,ExpState **, int, ExpState **, int, int));
-int exp_get_next_event_info _ANSI_ARGS_((Tcl_Interp *, ExpState *));
-int exp_dsleep _ANSI_ARGS_((Tcl_Interp *, double));
-void exp_init_event _ANSI_ARGS_((void));
-
-extern void (*exp_event_exit) _ANSI_ARGS_((Tcl_Interp *));
-
-void exp_event_disarm _ANSI_ARGS_((ExpState *,Tcl_FileProc *));
-void exp_event_disarm_bg _ANSI_ARGS_((ExpState *));
-void exp_event_disarm_fg _ANSI_ARGS_((ExpState *));
-
-void exp_arm_background_channelhandler _ANSI_ARGS_((ExpState *));
-void exp_disarm_background_channelhandler _ANSI_ARGS_((ExpState *));
-void exp_disarm_background_channelhandler_force _ANSI_ARGS_((ExpState *));
-void exp_unblock_background_channelhandler _ANSI_ARGS_((ExpState *));
-void exp_block_background_channelhandler _ANSI_ARGS_((ExpState *));
+int exp_get_next_event (Tcl_Interp *,ExpState **, int, ExpState **, int, int);
+int exp_get_next_event_info (Tcl_Interp *, ExpState *);
+int exp_dsleep (Tcl_Interp *, double);
+void exp_init_event (void);
+
+extern void (*exp_event_exit) (Tcl_Interp *);
+
+void exp_event_disarm (ExpState *,Tcl_FileProc *);
+void exp_event_disarm_bg (ExpState *);
+void exp_event_disarm_fg (ExpState *);
+
+void exp_arm_background_channelhandler (ExpState *);
+void exp_disarm_background_channelhandler (ExpState *);
+void exp_disarm_background_channelhandler_force (ExpState *);
+void exp_unblock_background_channelhandler (ExpState *);
+void exp_block_background_channelhandler (ExpState *);
 
-void exp_background_channelhandler _ANSI_ARGS_((ClientData,int));
+void exp_background_channelhandler (ClientData,int);
 
diff -up expect5.45.4/exp_glob.c.omv~ expect5.45.4/exp_glob.c
--- expect5.45.4/exp_glob.c.omv~	2025-02-14 14:27:41.651305181 +0100
+++ expect5.45.4/exp_glob.c	2025-02-14 14:27:59.099965746 +0100
@@ -17,12 +17,12 @@ would appreciate credit if this program
 
 /* Proper forward declaration of internal function */
 static int
-Exp_StringCaseMatch2 _ANSI_ARGS_((CONST Tcl_UniChar *string, /* String. */
-				  CONST Tcl_UniChar *stop,   /* First char _after_ string */
-				  CONST Tcl_UniChar *pattern,	 /* Pattern, which may contain
+Exp_StringCaseMatch2 (const Tcl_UniChar *string, /* String. */
+				  const Tcl_UniChar *stop,   /* First char _after_ string */
+				  const Tcl_UniChar *pattern,	 /* Pattern, which may contain
 								  * special characters. */
-				  CONST Tcl_UniChar *pstop,   /* First char _after_ pattern */
-				  int nocase));
+				  const Tcl_UniChar *pstop,   /* First char _after_ pattern */
+				  int nocase);
 
 /* The following functions implement expect's glob-style string matching */
 /* Exp_StringMatch allow's implements the unanchored front (or conversely */
@@ -37,9 +37,9 @@ Exp_StringCaseMatch(string, strlen, patt
      int nocase;
      int *offset;	/* offset in chars from beginning of string where pattern matches */
 {
-    CONST Tcl_UniChar *s;
-    CONST Tcl_UniChar *stop = string + strlen;
-    CONST Tcl_UniChar *pstop = pattern + plen;
+    const Tcl_UniChar *s;
+    const Tcl_UniChar *stop = string + strlen;
+    const Tcl_UniChar *pstop = pattern + plen;
     int ssm, sm;	/* count of bytes matched or -1 */
     int caret = FALSE;
     int star = FALSE;
@@ -124,16 +124,16 @@ Exp_StringCaseMatch(string, strlen, patt
 
 static int
 Exp_StringCaseMatch2(string,stop,pattern,pstop,nocase)	/* INTL */
-     register CONST Tcl_UniChar *string; /* String. */
-     register CONST Tcl_UniChar *stop;   /* First char _after_ string */
-     register CONST Tcl_UniChar *pattern;	 /* Pattern, which may contain
+     register const Tcl_UniChar *string; /* String. */
+     register const Tcl_UniChar *stop;   /* First char _after_ string */
+     register const Tcl_UniChar *pattern;	 /* Pattern, which may contain
 				 * special characters. */
-     register CONST Tcl_UniChar *pstop;   /* First char _after_ pattern */
+     register const Tcl_UniChar *pstop;   /* First char _after_ pattern */
     int nocase;
 {
     Tcl_UniChar ch1, ch2, p;
     int match = 0;	/* # of bytes matched */
-    CONST Tcl_UniChar *oldString;
+    const Tcl_UniChar *oldString;
 
 #ifdef EXP_INTERNAL_TRACE_GLOB
     expDiagLog("    ESCM2 pattern=\"");
@@ -177,7 +177,7 @@ Exp_StringCaseMatch2(string,stop,pattern
 	 */
 	
 	if (*pattern == '*') {
-	    CONST Tcl_UniChar *tail;
+	    const Tcl_UniChar *tail;
 
 	    /*
 	     * Skip all successive *'s in the pattern
diff -up expect5.45.4/exp_int.h.omv~ expect5.45.4/exp_int.h
--- expect5.45.4/exp_int.h.omv~	2025-02-14 13:49:38.465724162 +0100
+++ expect5.45.4/exp_int.h	2025-02-14 14:26:38.848923165 +0100
@@ -21,14 +21,14 @@ would appreciate credit if this program
 
 #include <errno.h>
 
-void	exp_console_set     _ANSI_ARGS_((void));
-void	expDiagLogPtrSet    _ANSI_ARGS_((void (*)_ANSI_ARGS_((char *))));
-void	expDiagLogPtr       _ANSI_ARGS_((char *));
-void	expDiagLogPtrX      _ANSI_ARGS_((char *,int));
-void	expDiagLogPtrStr    _ANSI_ARGS_((char *,char *));
-void	expDiagLogPtrStrStr _ANSI_ARGS_((char *,char *,char *));
-void	expErrnoMsgSet      _ANSI_ARGS_((char * (*) _ANSI_ARGS_((int))));
-char * expErrnoMsg    _ANSI_ARGS_((int));
+void	exp_console_set     (void);
+void	expDiagLogPtrSet    (void (*)(char *));
+void	expDiagLogPtr       (char *);
+void	expDiagLogPtrX      (char *,int);
+void	expDiagLogPtrStr    (char *,char *);
+void	expDiagLogPtrStrStr (char *,char *,char *);
+void	expErrnoMsgSet      (const char * (*) (int));
+char * expErrnoMsg    (int);
 
 #ifdef NO_STDLIB_H
 #  include "../compat/stdlib.h"
diff -up expect5.45.4/exp_inter.c.omv~ expect5.45.4/exp_inter.c
--- expect5.45.4/exp_inter.c.omv~	2025-02-14 14:17:44.477550026 +0100
+++ expect5.45.4/exp_inter.c	2025-02-14 14:18:34.845843783 +0100
@@ -696,8 +696,8 @@ static char *
 inter_updateproc(
     ClientData clientData,
     Tcl_Interp *interp,	/* Interpreter containing variable. */
-    char *name1,	/* Name of variable. */
-    char *name2,	/* Second part of variable name. */
+    const char *name1,	/* Name of variable. */
+    const char *name2,	/* Second part of variable name. */
     int flags)		/* Information about what happened. */
 {
 	exp_configure_count++;
@@ -715,11 +715,11 @@ Exp_InteractObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST initial_objv[])		/* Argument objects. */
+    Tcl_Obj *const initial_objv[])		/* Argument objects. */
 {
     ThreadSpecificData *tsdPtr = TCL_TSD_INIT(&dataKey);
 
-    Tcl_Obj *CONST *objv_copy;	/* original, for error messages */
+    Tcl_Obj *const *objv_copy;	/* original, for error messages */
     Tcl_Obj **objv = (Tcl_Obj **) initial_objv;
     char *string;
     Tcl_UniChar *ustring;
diff -up expect5.45.4/exp_log.c.omv~ expect5.45.4/exp_log.c
--- expect5.45.4/exp_log.c.omv~	2025-02-14 14:20:59.704760653 +0100
+++ expect5.45.4/exp_log.c	2025-02-14 14:24:05.681909661 +0100
@@ -46,7 +46,7 @@ static Tcl_ThreadDataKey dataKey;
  */
 static char bigbuf[2000];
 
-static void expDiagWriteCharsUni _ANSI_ARGS_((Tcl_UniChar *str,int len));
+static void expDiagWriteCharsUni (Tcl_UniChar *str,int len);
 
 /*
  * Following this are several functions that log the conversation.  Some
@@ -164,14 +164,15 @@ expLogInteractionU(esPtr,buf,buflen)
 #define LOGUSER		(tsdPtr->logUser || force_stdout)
 /*VARARGS*/
 void
-expStdoutLog TCL_VARARGS_DEF(int,arg1)
+expStdoutLog (int arg1, ...)
 {
     ThreadSpecificData *tsdPtr = TCL_TSD_INIT(&dataKey);
     int force_stdout;
     char *fmt;
     va_list args;
 
-    force_stdout = TCL_VARARGS_START(int,arg1,args);
+    va_start(args, arg1);
+    force_stdout = va_arg(args, int);
     fmt = va_arg(args,char *);
 
     if ((!tsdPtr->logUser) && (!force_stdout) && (!tsdPtr->logAll)) return;
@@ -214,14 +215,15 @@ int force_stdout;	/* override value of l
 /* use this function for error conditions */
 /*VARARGS*/
 void
-expErrorLog TCL_VARARGS_DEF(char *,arg1)
+expErrorLog (char *arg1, ...)
 {
     ThreadSpecificData *tsdPtr = TCL_TSD_INIT(&dataKey);
 
     char *fmt;
     va_list args;
 
-    fmt = TCL_VARARGS_START(char *,arg1,args);
+    va_start(args, arg1);
+    fmt = va_arg(args, char*);
     (void) vsnprintf(bigbuf,sizeof(bigbuf),fmt,args);
 
     expDiagWriteChars(bigbuf,-1);
@@ -253,7 +255,7 @@ char *buf;
 /* use this function for recording unusual things in the log */
 /*VARARGS*/
 void
-expDiagLog TCL_VARARGS_DEF(char *,arg1)
+expDiagLog (char *arg1, ...)
 {
     char *fmt;
     va_list args;
@@ -262,7 +264,8 @@ expDiagLog TCL_VARARGS_DEF(char *,arg1)
 
     if ((tsdPtr->diagToStderr == 0) && (tsdPtr->diagChannel == 0)) return;
 
-    fmt = TCL_VARARGS_START(char *,arg1,args);
+    va_start(arg1, args);
+    fmt = va_arg(args, char*);
 
     (void) vsnprintf(bigbuf,sizeof(bigbuf),fmt,args);
 
@@ -299,14 +302,15 @@ char *str;
 
 /*VARARGS*/
 void
-expPrintf TCL_VARARGS_DEF(char *,arg1)
+expPrintf (char *arg1, ...)
 {
   char *fmt;
   va_list args;
   char bigbuf[2000];
   int len, rc;
 
-  fmt = TCL_VARARGS_START(char *,arg1,args);
+  va_start(arg1, args);
+  fmt = va_arg(args, char*);
   len = vsnprintf(bigbuf,sizeof(bigbuf),arg1,args);
  retry:
   rc = write(2,bigbuf,len);
diff -up expect5.45.4/exp_log.h.omv~ expect5.45.4/exp_log.h
--- expect5.45.4/exp_log.h.omv~	2025-02-14 13:53:02.860976270 +0100
+++ expect5.45.4/exp_log.h	2025-02-14 13:54:48.127865647 +0100
@@ -1,47 +1,47 @@
 /* exp_log.h */
 
-extern void		expErrorLog _ANSI_ARGS_(TCL_VARARGS(char *,fmt));
-extern void		expErrorLogU _ANSI_ARGS_((char *));
+extern void		expErrorLog (char *fmt, ...);
+extern void		expErrorLogU (char *);
 
-extern void		expStdoutLog _ANSI_ARGS_(TCL_VARARGS(int,force_stdout));
-extern void		expStdoutLogU _ANSI_ARGS_((char *buf, int force_stdout));
+extern void		expStdoutLog (int force_stdout, ...);
+extern void		expStdoutLogU (char *buf, int force_stdout);
 
-EXTERN void		expDiagInit _ANSI_ARGS_((void));
-EXTERN int		expDiagChannelOpen _ANSI_ARGS_((Tcl_Interp *,char *));
-EXTERN Tcl_Channel	expDiagChannelGet _ANSI_ARGS_((void));
-EXTERN void		expDiagChannelClose _ANSI_ARGS_((Tcl_Interp *));
-EXTERN char *		expDiagFilename _ANSI_ARGS_((void));
-EXTERN int		expDiagToStderrGet _ANSI_ARGS_((void));
-EXTERN void		expDiagToStderrSet _ANSI_ARGS_((int));
-EXTERN void		expDiagWriteBytes _ANSI_ARGS_((char *,int));
-EXTERN void		expDiagWriteChars _ANSI_ARGS_((char *,int));
-EXTERN void		expDiagWriteObj _ANSI_ARGS_((Tcl_Obj *));
-EXTERN void		expDiagLog _ANSI_ARGS_(TCL_VARARGS(char *,fmt));
-EXTERN void		expDiagLogU _ANSI_ARGS_((char *));
-
-EXTERN char *		expPrintify _ANSI_ARGS_((char *));
-EXTERN char *		expPrintifyUni _ANSI_ARGS_((Tcl_UniChar *,int));
-EXTERN char *		expPrintifyObj _ANSI_ARGS_((Tcl_Obj *));
-EXTERN void		expPrintf _ANSI_ARGS_(TCL_VARARGS(char *,fmt));
-
-EXTERN void		expLogInit _ANSI_ARGS_((void));
-EXTERN int		expLogChannelOpen _ANSI_ARGS_((Tcl_Interp *,char *,int));
-EXTERN Tcl_Channel 	expLogChannelGet _ANSI_ARGS_((void));
-EXTERN int		expLogChannelSet _ANSI_ARGS_((Tcl_Interp *,char *));
-EXTERN void		expLogChannelClose _ANSI_ARGS_((Tcl_Interp *));
-EXTERN char *		expLogFilenameGet _ANSI_ARGS_((void));
-EXTERN void		expLogAppendSet _ANSI_ARGS_((int));
-EXTERN int		expLogAppendGet _ANSI_ARGS_((void));
-EXTERN void		expLogLeaveOpenSet _ANSI_ARGS_((int));
-EXTERN int		expLogLeaveOpenGet _ANSI_ARGS_((void));
-EXTERN void		expLogAllSet _ANSI_ARGS_((int));
-EXTERN int		expLogAllGet _ANSI_ARGS_((void));
-EXTERN void		expLogToStdoutSet _ANSI_ARGS_((int));
-EXTERN int		expLogToStdoutGet _ANSI_ARGS_((void));
-EXTERN void		expLogDiagU _ANSI_ARGS_((char *));
-EXTERN int		expWriteBytesAndLogIfTtyU _ANSI_ARGS_((ExpState *,Tcl_UniChar *,int));
+EXTERN void		expDiagInit (void);
+EXTERN int		expDiagChannelOpen (Tcl_Interp *,char *);
+EXTERN Tcl_Channel	expDiagChannelGet (void);
+EXTERN void		expDiagChannelClose (Tcl_Interp *);
+EXTERN char *		expDiagFilename (void);
+EXTERN int		expDiagToStderrGet (void);
+EXTERN void		expDiagToStderrSet (int);
+EXTERN void		expDiagWriteBytes (char *,int);
+EXTERN void		expDiagWriteChars (char *,int);
+EXTERN void		expDiagWriteObj (Tcl_Obj *);
+EXTERN void		expDiagLog (char *fmt, ...);
+EXTERN void		expDiagLogU (char *);
+
+EXTERN char *		expPrintify (char *);
+EXTERN char *		expPrintifyUni (Tcl_UniChar *,int);
+EXTERN char *		expPrintifyObj (Tcl_Obj *);
+EXTERN void		expPrintf (char *fmt, ...);
+
+EXTERN void		expLogInit (void);
+EXTERN int		expLogChannelOpen (Tcl_Interp *,char *,int);
+EXTERN Tcl_Channel 	expLogChannelGet (void);
+EXTERN int		expLogChannelSet (Tcl_Interp *,char *);
+EXTERN void		expLogChannelClose (Tcl_Interp *);
+EXTERN char *		expLogFilenameGet (void);
+EXTERN void		expLogAppendSet (int);
+EXTERN int		expLogAppendGet (void);
+EXTERN void		expLogLeaveOpenSet (int);
+EXTERN int		expLogLeaveOpenGet (void);
+EXTERN void		expLogAllSet (int);
+EXTERN int		expLogAllGet (void);
+EXTERN void		expLogToStdoutSet (int);
+EXTERN int		expLogToStdoutGet (void);
+EXTERN void		expLogDiagU (char *);
+EXTERN int		expWriteBytesAndLogIfTtyU (ExpState *,Tcl_UniChar *,int);
 
-EXTERN int		expLogUserGet _ANSI_ARGS_((void));
-EXTERN void		expLogUserSet _ANSI_ARGS_((int));
+EXTERN int		expLogUserGet (void);
+EXTERN void		expLogUserSet (int);
 
-EXTERN void		expLogInteractionU _ANSI_ARGS_((ExpState *,Tcl_UniChar *,int));
+EXTERN void		expLogInteractionU (ExpState *,Tcl_UniChar *,int);
diff -up expect5.45.4/exp_main_sub.c.omv~ expect5.45.4/exp_main_sub.c
--- expect5.45.4/exp_main_sub.c.omv~	2025-02-14 14:24:16.841475385 +0100
+++ expect5.45.4/exp_main_sub.c	2025-02-14 18:09:40.389763186 +0100
@@ -66,6 +66,13 @@ int exp_getpid;
 
 int exp_strict_write = 0;
 
+extern int 
+exp_tty_cooked_echo(
+    Tcl_Interp *interp,
+    exp_tty *tty_old,
+    int *was_raw,
+    int *was_echo);
+
 
 static void
 usage(interp)
@@ -158,7 +165,7 @@ Tcl_Interp *interp;
        maintain our own static version */
 
     static int nextid = 0;
-    CONST char *nextidstr = Tcl_GetVar2(interp,"tcl::history","nextid",0);
+    const char *nextidstr = Tcl_GetVar2(interp,"tcl::history","nextid",0);
     if (nextidstr) {
 	/* intentionally ignore failure */
 	(void) sscanf(nextidstr,"%d",&nextid);
@@ -179,7 +186,7 @@ Exp_Prompt1ObjCmd(clientData, interp, ob
 ClientData clientData;
 Tcl_Interp *interp;
 int objc;
-Tcl_Obj *CONST objv[];		/* Argument objects. */
+Tcl_Obj *const objv[];		/* Argument objects. */
 {
     static char buffer[200];
 
@@ -196,7 +203,7 @@ Exp_Prompt2ObjCmd(clientData, interp, ob
 ClientData clientData;
 Tcl_Interp *interp;
 int objc;
-Tcl_Obj *CONST objv[];
+Tcl_Obj *const objv[];
 {
     Tcl_SetResult(interp,prompt2_default,TCL_STATIC);
     return(TCL_OK);
@@ -432,7 +439,7 @@ Exp_ExpVersionObjCmd(clientData, interp,
 ClientData clientData;
 Tcl_Interp *interp;
      int objc;
-     Tcl_Obj *CONST objv[];		/* Argument objects. */
+     Tcl_Obj *const objv[];		/* Argument objects. */
 {
 	int emajor, umajor;
 	char *user_version;	/* user-supplied version string */
@@ -542,7 +549,7 @@ Tcl_Interp *interp;
       return TCL_ERROR;
     }
 #else
-    if (Tcl_InitStubs(interp, "8.1", 0) == NULL) {
+    if (Tcl_InitStubs(interp, "9.0.1", 0) == NULL) {
       return TCL_ERROR;
     }
 #endif
@@ -815,7 +822,7 @@ char **argv;
 					exp_cmdfilename = 0;
 					expCloseOnExec(fileno(exp_cmdfile));
 				} else {
-					CONST char *msg;
+					const char *msg;
 
 					if (errno == 0) {
 						msg = "could not read - odd file name?";
diff -up expect5.45.4/exp_pty.c.omv~ expect5.45.4/exp_pty.c
--- expect5.45.4/exp_pty.c.omv~	2025-02-14 14:27:00.282965993 +0100
+++ expect5.45.4/exp_pty.c	2025-02-14 14:27:13.633404492 +0100
@@ -302,11 +302,11 @@ exp_pty_lock(
  * ones that call expDiagLog from the two different environments.
  */
 
-static void		(*expDiagLogPtrVal) _ANSI_ARGS_((char *));
+static void		(*expDiagLogPtrVal) (char *);
 
 void
 expDiagLogPtrSet(fn)
-     void (*fn) _ANSI_ARGS_((char *));
+     void (*fn) (char *);
 {
   expDiagLogPtrVal = fn;
 }
@@ -351,7 +351,7 @@ expDiagLogPtrStrStr(fmt,str1,str2)
   (*expDiagLogPtrVal)(buf);
 }
 
-static char *		(*expErrnoMsgVal) _ANSI_ARGS_((int));
+static char *		(*expErrnoMsgVal) (int);
 
 char *
 expErrnoMsg(errorNo)
@@ -362,7 +362,7 @@ int errorNo;
 
 void
 expErrnoMsgSet(fn)
-     char * (*fn) _ANSI_ARGS_((int));
+     char * (*fn) (int);
 {
   expErrnoMsgVal = fn;
 }
diff -up expect5.45.4/exp_pty.h.omv~ expect5.45.4/exp_pty.h
--- expect5.45.4/exp_pty.h.omv~	2025-02-14 13:55:44.842850961 +0100
+++ expect5.45.4/exp_pty.h	2025-02-14 13:55:48.688578901 +0100
@@ -14,6 +14,6 @@ int exp_pty_test(char *master_name, char
 void exp_pty_unlock(void);
 int exp_pty_lock(char bank, char *num);
 int exp_getptymaster(void);
-int exp_getptyslave(int ttycopy, int ttyinit, CONST char *stty_args);
+int exp_getptyslave(int ttycopy, int ttyinit, const char *stty_args);
 
 extern char *exp_pty_slave_name;
diff -up expect5.45.4/exp_trap.c.omv~ expect5.45.4/exp_trap.c
--- expect5.45.4/exp_trap.c.omv~	2025-02-14 14:27:26.374124405 +0100
+++ expect5.45.4/exp_trap.c	2025-02-14 14:27:35.964687330 +0100
@@ -47,7 +47,7 @@ static struct trap {
 				/* is processed */
 	int code;		/* return our new code instead of code */
 				/* available when signal is processed */
-	CONST char *name;	/* name of signal */
+	const char *name;	/* name of signal */
 	int reserved;		/* if unavailable for trapping */
 } traps[NSIG];
 
@@ -63,7 +63,7 @@ static int got_sig;		/* this records the
 
 static Tcl_AsyncHandler async_handler;
 
-static CONST char *
+static const char *
 signal_to_string(sig)
 int sig;
 {
@@ -277,7 +277,7 @@ Tcl_Interp *interp;
 char *s;
 {
 	int sig;
-	CONST char *name;
+	const char *name;
 
 	/* try interpreting as an integer */
 	if (1 == sscanf(s,"%d",&sig)) {
@@ -301,7 +301,7 @@ Exp_TrapObjCmd(clientData, interp, objc,
 ClientData clientData;
 Tcl_Interp *interp;
 int objc;
-Tcl_Obj *CONST objv[];
+Tcl_Obj *const objv[];
 {
 	char *action = 0;
 	int n;		/* number of signals in list */
@@ -352,7 +352,7 @@ Tcl_Obj *CONST objv[];
 		}
 		if (show_name) {
 		  /* skip over "SIG" */
-		  /* TIP 27: Casting away the CONST should be ok because of TCL_STATIC
+		  /* TIP 27: Casting away the const should be ok because of TCL_STATIC
 		   */
 		  Tcl_SetResult(interp,(char*)signal_to_string(current_sig) + 3,TCL_STATIC);
 		} else {
diff -up expect5.45.4/exp_tstamp.h.omv~ expect5.45.4/exp_tstamp.h
--- expect5.45.4/exp_tstamp.h.omv~	2025-02-14 14:00:44.387820939 +0100
+++ expect5.45.4/exp_tstamp.h	2025-02-14 14:01:02.043356731 +0100
@@ -1,2 +1,2 @@
-EXTERN void		exp_timestamp _ANSI_ARGS_((Tcl_Interp *,time_t *,
-				char *));
+EXTERN void		exp_timestamp (Tcl_Interp *,time_t *,
+				char *);
diff -up expect5.45.4/exp_tty.c.omv~ expect5.45.4/exp_tty.c
--- expect5.45.4/exp_tty.c.omv~	2025-02-14 14:20:05.876142802 +0100
+++ expect5.45.4/exp_tty.c	2025-02-14 14:20:43.480400186 +0100
@@ -370,7 +370,7 @@ Exp_SttyCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int argc,
-    char **argv)
+    const char **argv)
 {
 	/* redirection symbol is not counted as a stty arg in terms */
 	/* of recognition. */
@@ -569,7 +569,7 @@ Exp_SystemCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int argc,
-    char **argv)
+    const char **argv)
 {
 	int result = TCL_OK;
 	RETSIGTYPE (*old)();	/* save old sigalarm handler */
@@ -759,7 +759,7 @@ Exp_SystemCmd(
 			(char *) NULL);
 		abnormalExit = TRUE;
 	    } else if (WIFSIGNALED(waitStatus)) {
-		CONST char *p;
+		const char *p;
 	
 		p = Tcl_SignalMsg((int) (WTERMSIG(waitStatus)));
 		Tcl_SetErrorCode(interp, "CHILDKILLED", msg1,
@@ -768,7 +768,7 @@ Exp_SystemCmd(
 		Tcl_AppendResult(interp, "child killed: ", p, "\n",
 			(char *) NULL);
 	    } else if (WIFSTOPPED(waitStatus)) {
-		CONST char *p;
+		const char *p;
 
 		p = Tcl_SignalMsg((int) (WSTOPSIG(waitStatus)));
 		Tcl_SetErrorCode(interp, "CHILDSUSP", msg1,
diff -up expect5.45.4/exp_win.h.omv~ expect5.45.4/exp_win.h
--- expect5.45.4/exp_win.h.omv~	2025-02-14 14:18:43.341513453 +0100
+++ expect5.45.4/exp_win.h	2025-02-14 14:19:58.370862930 +0100
@@ -11,12 +11,12 @@ would appreciate credit if you use this
 int exp_window_size_set();
 int exp_window_size_get();
 
-void  exp_win_rows_set    _ANSI_ARGS_ ((char* rows));
-char* exp_win_rows_get    _ANSI_ARGS_ ((void));
-void  exp_win_columns_set _ANSI_ARGS_ ((char* columns));
-char* exp_win_columns_get _ANSI_ARGS_ ((void));
+void  exp_win_rows_set    (char* rows);
+char* exp_win_rows_get    (void);
+void  exp_win_columns_set (char* columns);
+char* exp_win_columns_get (void);
 
-void  exp_win2_rows_set    _ANSI_ARGS_ ((int fd, char* rows));
-char* exp_win2_rows_get    _ANSI_ARGS_ ((int fd));
-void  exp_win2_columns_set _ANSI_ARGS_ ((int fd, char* columns));
-char* exp_win2_columns_get _ANSI_ARGS_ ((int fd));
+void  exp_win2_rows_set    (int fd, char* rows);
+char* exp_win2_rows_get    (int fd);
+void  exp_win2_columns_set (int fd, char* columns);
+char* exp_win2_columns_get (int fd);
diff -up expect5.45.4/expect.c.omv~ expect5.45.4/expect.c
--- expect5.45.4/expect.c.omv~	2025-02-14 14:09:05.467702055 +0100
+++ expect5.45.4/expect.c	2025-02-14 14:17:27.388046042 +0100
@@ -55,9 +55,9 @@ int exp_default_close_on_eof =  TRUE;
 #define EXPECT_TIMEOUT		"timeout"
 #define EXPECT_OUT		"expect_out"
 
-extern int Exp_StringCaseMatch _ANSI_ARGS_((Tcl_UniChar *string, int strlen,
-					    Tcl_UniChar *pattern,int plen,
-					    int nocase,int *offset));
+extern int Exp_StringCaseMatch (Tcl_UniChar *string, int strlen,
+			    Tcl_UniChar *pattern,int plen,
+			    int nocase,int *offset);
 
 typedef struct ThreadSpecificData {
     int timeout;
@@ -163,8 +163,8 @@ static char *exp_indirect_update1( /* 1-
 static char *exp_indirect_update2( /* 2-part Tcl variable names */
     ClientData clientData,
     Tcl_Interp *interp,	/* Interpreter containing variable. */
-    char *name1,	/* Name of variable. */
-    char *name2,	/* Second part of variable name. */
+    const char *name1,	/* Name of variable. */
+    const char *name2,	/* Second part of variable name. */
     int flags);		/* Information about what happened. */
 
 #ifdef SIMPLE_EVENT
@@ -276,14 +276,14 @@ Tcl_Obj*
 exp_eval_with_one_arg(
     ClientData clientData,
     Tcl_Interp *interp,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     Tcl_Obj* res = Tcl_NewListObj (1,objv);
 
 #define NUM_STATIC_OBJS 20
     Tcl_Token *tokenPtr;
-    CONST char *p;
-    CONST char *next;
+    const char *p;
+    const char *next;
     int rc;
     int bytesLeft, numWords;
     Tcl_Parse parse;
@@ -325,8 +325,9 @@ exp_eval_with_one_arg(
 		 numWords--, tokenPtr += (tokenPtr->numComponents + 1)) {
 		/* FUTURE: Save token information, do substitution later */
 
-		Tcl_Obj* w = Tcl_EvalTokens(interp, tokenPtr+1,
+		int err = Tcl_EvalTokensStandard(interp, tokenPtr+1,
 			tokenPtr->numComponents);
+		Tcl_Obj* w = Tcl_GetObjResult(interp);
 		/* w has refCount 1 here, if not NULL */
 		if (w == NULL) {
 		    Tcl_DecrRefCount (res);
@@ -409,7 +410,7 @@ parse_expect_args(
     struct exp_cmd_descriptor *eg,
     ExpState *default_esPtr,	/* suggested ExpState if called as expect_user or _tty */
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int i;
     char *string;
@@ -958,7 +959,7 @@ eval_case_string(
 	    return(EXP_MATCH);
 	} else expDiagLogU(no);
     } else if (e->use == PAT_NULL) {
-	CONST Tcl_UniChar *p;
+	const Tcl_UniChar *p;
 	expDiagLogU("null? ");
 	p = string_first_char (str, 0); /* NEW function in this file, see above */
 
@@ -1297,7 +1298,7 @@ expect_info(
     Tcl_Interp *interp,
     struct exp_cmd_descriptor *ecmd,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     struct exp_i *exp_i;
     int i;
@@ -1385,7 +1386,7 @@ Exp_ExpectGlobalObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int result = TCL_OK;
     struct exp_i *exp_i, **eip;
@@ -2058,7 +2059,7 @@ static int
 get_timeout(Tcl_Interp *interp)
 {
     ThreadSpecificData *tsdPtr = TCL_TSD_INIT(&dataKey);
-    CONST char *t;
+    const char *t;
 
     if (NULL != (t = exp_get_var(interp,EXPECT_TIMEOUT))) {
 	tsdPtr->timeout = atoi(t);
@@ -2121,8 +2122,8 @@ static char *
 exp_indirect_update2(
     ClientData clientData,
     Tcl_Interp *interp,	/* Interpreter containing variable. */
-    char *name1,	/* Name of variable. */
-    char *name2,	/* Second part of variable name. */
+    const char *name1,	/* Name of variable. */
+    const char *name2,	/* Second part of variable name. */
     int flags)		/* Information about what happened. */
 {
 	char *msg;
@@ -2531,7 +2532,7 @@ Exp_ExpectObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int cc;			/* number of chars returned in a single read */
 				/* or negative EXP_whatever */
@@ -2788,7 +2789,7 @@ Exp_TimestampObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
 	char *format = 0;
 	time_t seconds = -1;
@@ -2874,23 +2875,23 @@ Exp_TimestampObjCmd(
  */
 
 static int
-process_di _ANSI_ARGS_ ((Tcl_Interp* interp,
+process_di (Tcl_Interp* interp,
 			 int objc,
-			 Tcl_Obj *CONST objv[],		/* Argument objects. */
+			 Tcl_Obj *const objv[],		/* Argument objects. */
 			 int* at,
 			 int* Default,
 			 ExpState **esOut,
-			 CONST char* cmd));
+			 const char* cmd);
 
 static int
 process_di (
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[],		/* Argument objects. */
+    Tcl_Obj *const objv[],		/* Argument objects. */
     int* at,
     int* Default,
     ExpState **esOut,
-    CONST char* cmd)
+    const char* cmd)
 {
     static char* options[] = {
 	"-d",
@@ -2968,7 +2969,7 @@ Exp_MatchMaxObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int size = -1;
     ExpState *esPtr = 0;
@@ -3014,7 +3015,7 @@ Exp_RemoveNullsObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int value = -1;
     ExpState *esPtr = 0;
@@ -3058,7 +3059,7 @@ Exp_ParityObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int parity;
     ExpState *esPtr = 0;
@@ -3097,7 +3098,7 @@ Exp_CloseOnEofObjCmd(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
     int close_on_eof;
     ExpState *esPtr = 0;
@@ -3197,7 +3198,7 @@ cmdX(
     ClientData clientData,
     Tcl_Interp *interp,
     int objc,
-    Tcl_Obj *CONST objv[])		/* Argument objects. */
+    Tcl_Obj *const objv[])		/* Argument objects. */
 {
 	exp_cmds_print();
 	return TCL_OK;
diff -up expect5.45.4/expect.h.omv~ expect5.45.4/expect.h
--- expect5.45.4/expect.h.omv~	2025-02-14 13:42:29.164045592 +0100
+++ expect5.45.4/expect.h	2025-02-14 13:48:24.334284617 +0100
@@ -318,11 +318,11 @@ typedef struct regexp {
 	char program[1];	/* Unwarranted chumminess with compiler. */
 } regexp;
 
-EXTERN regexp *TclRegComp _ANSI_ARGS_((char *exp));
-EXTERN int TclRegExec _ANSI_ARGS_((regexp *prog, char *string, char *start));
-EXTERN void TclRegSub _ANSI_ARGS_((regexp *prog, char *source, char *dest));
-EXTERN void exp_TclRegError _ANSI_ARGS_((char *msg));
-EXTERN char *TclGetRegError _ANSI_ARGS_((void));
+EXTERN regexp *TclRegComp (char *exp);
+EXTERN int TclRegExec (regexp *prog, char *string, char *start);
+EXTERN void TclRegSub (regexp *prog, char *source, char *dest);
+EXTERN void exp_TclRegError (char *msg);
+EXTERN char *TclGetRegError (void);
 
 # undef TCL_STORAGE_CLASS
 # define TCL_STORAGE_CLASS DLLIMPORT
@@ -392,27 +392,27 @@ EXTERN int exp_is_debugging;
 EXTERN int exp_loguser;
 
 EXTERN void (*exp_close_in_child)();	/* procedure to close files in child */
-EXTERN void exp_slave_control _ANSI_ARGS_((int,int));
+EXTERN void exp_slave_control (int,int);
 EXTERN int exp_logfile_all;
 EXTERN FILE *exp_debugfile;
 EXTERN FILE *exp_logfile;
-extern void exp_debuglog _ANSI_ARGS_(TCL_VARARGS(char *,fmt));
-extern void exp_errorlog _ANSI_ARGS_(TCL_VARARGS(char *,fmt));
+extern void exp_debuglog (char *fmt, ...);
+extern void exp_errorlog (char *fmt, ...);
 
-EXTERN int exp_disconnect _ANSI_ARGS_((void));
-EXTERN FILE *exp_popen	_ANSI_ARGS_((char *command));
-EXTERN void (*exp_child_exec_prelude) _ANSI_ARGS_((void));
+EXTERN int exp_disconnect (void);
+EXTERN FILE *exp_popen	(char *command);
+EXTERN void (*exp_child_exec_prelude) (void);
 
 #ifndef EXP_DEFINE_FNS
-EXTERN int exp_spawnl	_ANSI_ARGS_(TCL_VARARGS(char *,file));
-EXTERN int exp_expectl	_ANSI_ARGS_(TCL_VARARGS(int,fd));
-EXTERN int exp_fexpectl	_ANSI_ARGS_(TCL_VARARGS(FILE *,fp));
+EXTERN int exp_spawnl	(char *file, ...);
+EXTERN int exp_expectl	(int fd, ...);
+EXTERN int exp_fexpectl	(FILE *fp, ...);
 #endif
 
-EXTERN int exp_spawnv	_ANSI_ARGS_((char *file, char *argv[]));
-EXTERN int exp_expectv	_ANSI_ARGS_((int fd, struct exp_case *cases));
-EXTERN int exp_fexpectv	_ANSI_ARGS_((FILE *fp, struct exp_case *cases));
+EXTERN int exp_spawnv	(char *file, char *argv[]);
+EXTERN int exp_expectv	(int fd, struct exp_case *cases);
+EXTERN int exp_fexpectv	(FILE *fp, struct exp_case *cases);
 
-EXTERN int exp_spawnfd	_ANSI_ARGS_((int fd));
+EXTERN int exp_spawnfd	(int fd);
 
 #endif /* _EXPECT_H */
diff -up expect5.45.4/expect_tcl.h.omv~ expect5.45.4/expect_tcl.h
--- expect5.45.4/expect_tcl.h.omv~	2025-02-14 13:41:49.274130655 +0100
+++ expect5.45.4/expect_tcl.h	2025-02-14 13:50:21.219671250 +0100
@@ -37,21 +37,21 @@ EXTERN int exp_tcl_debugger_available;
 EXTERN Tcl_Interp *exp_interp;
 
 #define Exp_Init Expect_Init
-EXTERN int	Expect_Init _ANSI_ARGS_((Tcl_Interp *));	/* for Tcl_AppInit apps */
-EXTERN void	exp_parse_argv _ANSI_ARGS_((Tcl_Interp *,int argc,char **argv));
-EXTERN int	exp_interpreter _ANSI_ARGS_((Tcl_Interp *,Tcl_Obj *));
-EXTERN int	exp_interpret_cmdfile _ANSI_ARGS_((Tcl_Interp *,FILE *));
-EXTERN int	exp_interpret_cmdfilename _ANSI_ARGS_((Tcl_Interp *,char *));
-EXTERN void	exp_interpret_rcfiles _ANSI_ARGS_((Tcl_Interp *,int my_rc,int sys_rc));
+EXTERN int	Expect_Init (Tcl_Interp *);	/* for Tcl_AppInit apps */
+EXTERN void	exp_parse_argv (Tcl_Interp *,int argc,char **argv);
+EXTERN int	exp_interpreter (Tcl_Interp *,Tcl_Obj *);
+EXTERN int	exp_interpret_cmdfile (Tcl_Interp *,FILE *);
+EXTERN int	exp_interpret_cmdfilename (Tcl_Interp *,char *);
+EXTERN void	exp_interpret_rcfiles (Tcl_Interp *,int my_rc,int sys_rc);
 
-EXTERN char *	exp_cook _ANSI_ARGS_((char *s,int *len));
+EXTERN char *	exp_cook (char *s,int *len);
 
-EXTERN void	expCloseOnExec _ANSI_ARGS_((int));
+EXTERN void	expCloseOnExec (int);
 
 			/* app-specific exit handler */
-EXTERN void	(*exp_app_exit)_ANSI_ARGS_((Tcl_Interp *));
-EXTERN void	exp_exit_handlers _ANSI_ARGS_((ClientData));
+EXTERN void	(*exp_app_exit)(Tcl_Interp *);
+EXTERN void	exp_exit_handlers (ClientData);
 
-EXTERN void	exp_error _ANSI_ARGS_(TCL_VARARGS(Tcl_Interp *,interp));
+EXTERN void	exp_error (Tcl_Interp *interp, ...);
 
 #endif /* _EXPECT_TCL_H */
diff -up expect5.45.4/pty_termios.c.omv~ expect5.45.4/pty_termios.c
--- expect5.45.4/pty_termios.c.omv~	2025-02-14 18:03:29.664967601 +0100
+++ expect5.45.4/pty_termios.c	2025-02-14 18:03:54.422485407 +0100
@@ -9,12 +9,14 @@ would appreciate credit if you use this
 
 #include <stdio.h>
 #include <signal.h>
+#include <pty.h>
 
 #if defined(SIGCLD) && !defined(SIGCHLD)
 #define SIGCHLD SIGCLD
 #endif
 
 #include "expect_cf.h"
+#include "exp_int.h"
 
 /*
    The following functions are linked from the Tcl library.  They
@@ -633,7 +635,7 @@ int
 exp_getptyslave(
     int ttycopy,
     int ttyinit,
-    CONST char *stty_args)
+    const char *stty_args)
 {
 	int slave, slave2;
 	char buf[10240];
diff -up expect5.45.4/retoglob.c.omv~ expect5.45.4/retoglob.c
--- expect5.45.4/retoglob.c.omv~	2025-02-14 14:01:10.102836551 +0100
+++ expect5.45.4/retoglob.c	2025-02-14 18:09:01.566732710 +0100
@@ -8,34 +8,34 @@
 #define DEBUG 0
 
 static void
-ExpChopNested _ANSI_ARGS_ ((Tcl_UniChar** xstr,
+ExpChopNested (Tcl_UniChar** xstr,
 			    int*          xstrlen,
 			    Tcl_UniChar   open,
-			    Tcl_UniChar   close));
+			    Tcl_UniChar   close);
 
 static Tcl_UniChar*
-ExpLiteral _ANSI_ARGS_ ((Tcl_UniChar* nexto,
+ExpLiteral (Tcl_UniChar* nexto,
 			 Tcl_UniChar* str,
-			 int          strlen));
+			 int          strlen);
 
 static Tcl_UniChar*
-ExpCollapseStar _ANSI_ARGS_ ((Tcl_UniChar* src,
-			      Tcl_UniChar* last));
+ExpCollapseStar (Tcl_UniChar* src,
+			      Tcl_UniChar* last);
 static Tcl_UniChar*
-ExpCollapseQForward _ANSI_ARGS_ ((Tcl_UniChar* src,
-				  Tcl_UniChar* last));
+ExpCollapseQForward (Tcl_UniChar* src,
+				  Tcl_UniChar* last);
 
 static Tcl_UniChar*
-ExpCollapseQBack _ANSI_ARGS_ ((Tcl_UniChar* src,
-			       Tcl_UniChar* last));
+ExpCollapseQBack (Tcl_UniChar* src,
+			       Tcl_UniChar* last);
 
 static Tcl_UniChar
-ExpBackslash _ANSI_ARGS_ ((char prefix,
+ExpBackslash (char prefix,
 			 Tcl_UniChar* str,
-			 int          strlen));
+			 int          strlen);
 
 static int
-ExpCountStar _ANSI_ARGS_ ((Tcl_UniChar* src, Tcl_UniChar* last));
+ExpCountStar (Tcl_UniChar* src, Tcl_UniChar* last);
 
 
 static char*
@@ -46,6 +46,34 @@ xxx (Tcl_UniChar* x, int xl)
   return Tcl_UniCharToUtfDString (x,xl,&ds);
 }
 
+// Function copied from Tcl 9.0.1 sources (no longer exported)
+static int
+Tcl_UniCharNcmp(
+    const Tcl_UniChar *ucs,     /* Unicode string to compare to uct. */
+    const Tcl_UniChar *uct,     /* Unicode string ucs is compared to. */
+    size_t numChars)    /* Number of chars to compare. */
+{
+#if defined(WORDS_BIGENDIAN)
+    /*
+     * We are definitely on a big-endian machine; memcmp() is safe
+     */
+
+    return memcmp(ucs, uct, numChars*sizeof(Tcl_UniChar));
+
+#else /* !WORDS_BIGENDIAN */
+    /*
+     * We can't simply call memcmp() because that is not lexically correct.
+     */
+
+    for ( ; numChars != 0; ucs++, uct++, numChars--) {
+        if (*ucs != *uct) {
+            return (*ucs - *uct);
+        }
+    }
+    return 0;
+#endif /* WORDS_BIGENDIAN */
+}
+
 
 Tcl_Obj*
 exp_retoglob (
diff -up expect5.45.4/tcldbg.h.omv~ expect5.45.4/tcldbg.h
--- expect5.45.4/tcldbg.h.omv~	2025-02-14 13:56:45.947505184 +0100
+++ expect5.45.4/tcldbg.h	2025-02-14 13:57:09.876583315 +0100
@@ -14,14 +14,14 @@ would appreciate credit if this program
 
 #include "tcl.h"
 
-typedef int (Dbg_InterProc) _ANSI_ARGS_((Tcl_Interp *interp, ClientData data));
-typedef int (Dbg_IgnoreFuncsProc) _ANSI_ARGS_((
+typedef int (Dbg_InterProc) (Tcl_Interp *interp, ClientData data);
+typedef int (Dbg_IgnoreFuncsProc) (
 			Tcl_Interp *interp,
-			char *funcname));
-typedef void (Dbg_OutputProc) _ANSI_ARGS_((
+			char *funcname);
+typedef void (Dbg_OutputProc) (
 			Tcl_Interp *interp,
 			char *output,
-			ClientData data));
+			ClientData data);
 
 typedef struct {
   Dbg_InterProc *func;
@@ -37,26 +37,26 @@ EXTERN char *Dbg_VarName;
 EXTERN char *Dbg_DefaultCmdName;
 
 /* trivial interface, creates a "debug" command in your interp */
-EXTERN int Tcldbg_Init _ANSI_ARGS_((Tcl_Interp *));
+EXTERN int Tcldbg_Init (Tcl_Interp *);
 
-EXTERN void Dbg_On _ANSI_ARGS_((Tcl_Interp *interp,
-					int immediate));
-EXTERN void Dbg_Off _ANSI_ARGS_((Tcl_Interp *interp));
-EXTERN char **Dbg_ArgcArgv _ANSI_ARGS_((int argc,char *argv[],
-					int copy));
-EXTERN int Dbg_Active _ANSI_ARGS_((Tcl_Interp *interp));
-EXTERN Dbg_InterStruct Dbg_Interactor _ANSI_ARGS_((
+EXTERN void Dbg_On (Tcl_Interp *interp,
+					int immediate);
+EXTERN void Dbg_Off (Tcl_Interp *interp);
+EXTERN char **Dbg_ArgcArgv (int argc,char *argv[],
+					int copy);
+EXTERN int Dbg_Active (Tcl_Interp *interp);
+EXTERN Dbg_InterStruct Dbg_Interactor (
 					Tcl_Interp *interp,
 					Dbg_InterProc *interactor,
-					ClientData data));
-EXTERN Dbg_IgnoreFuncsProc *Dbg_IgnoreFuncs _ANSI_ARGS_((
+					ClientData data);
+EXTERN Dbg_IgnoreFuncsProc *Dbg_IgnoreFuncs (
 					Tcl_Interp *interp,
-					Dbg_IgnoreFuncsProc *));
-EXTERN Dbg_OutputStruct Dbg_Output _ANSI_ARGS_((
+					Dbg_IgnoreFuncsProc *);
+EXTERN Dbg_OutputStruct Dbg_Output (
 					Tcl_Interp *interp,
 					Dbg_OutputProc *,
-					ClientData data));
+					ClientData data);
 
-EXTERN void Dbg_StdinMode _ANSI_ARGS_((int mode));
+EXTERN void Dbg_StdinMode (int mode);
 
 #endif /* _NIST_DBG */
